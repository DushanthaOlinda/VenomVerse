// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VenomVerseApi.Models;

#nullable disable

namespace VenomVerseApi.Migrations
{
    [DbContext(typeof(VenomVerseContext))]
    [Migration("20230731093236_updated_requests")]
    partial class updatedrequests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VenomVerseApi.Models.Catcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("ApprovedDateOne")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ApprovedDateThree")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ApprovedDateTwo")
                        .HasColumnType("date");

                    b.Property<bool>("ApprovedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("ApprovedPersonIdOne")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedPersonIdThree")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedPersonIdTwo")
                        .HasColumnType("bigint");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string[]>("CatcherEvidence")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string[,]>("CatcherRating")
                        .HasColumnType("text[]");

                    b.Property<float?>("ChargingFee")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Catcher");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("CommunityAdmin");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ArticleCopyright")
                        .HasColumnType("text[]");

                    b.Property<string[,]>("ArticleReport")
                        .HasColumnType("text[]");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[,]>("Comment")
                        .HasColumnType("text[]");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<long[]>("React")
                        .HasColumnType("bigint[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CommunityArticle");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string[]>("BookCopyright")
                        .HasColumnType("text[]");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<DateOnly?>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("UploadedDate")
                        .HasColumnType("date");

                    b.Property<long>("UploadedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CommunityBook");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[,]>("Comment")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<string[,]>("PostReport")
                        .HasColumnType("text[]");

                    b.Property<long[]>("React")
                        .HasColumnType("bigint[]");

                    b.HasKey("Id");

                    b.ToTable("CommunityPost");
                });

            modelBuilder.Entity("VenomVerseApi.Models.EmergencyContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencySpecialNote")
                        .HasColumnType("text");

                    b.Property<string>("HospitalName")
                        .HasColumnType("text");

                    b.Property<string>("PerssonName")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string[,]>("AnswerList")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Marks")
                        .HasColumnType("real");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string[]>("QuestionMedia")
                        .HasColumnType("text[]");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("WriterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<float?>("AttemptedMarks")
                        .HasColumnType("real");

                    b.Property<float?>("PassMark")
                        .HasColumnType("real");

                    b.Property<string>("QuizType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("TotalMarks")
                        .HasColumnType("real");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RegistrationRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RegistrationRequest");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RequestService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<bool>("AcceptFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("CatcherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CompleteFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FakeReqFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("ReqUserId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ScannedImage")
                        .HasColumnType("text[]");

                    b.Property<string>("SelectedSerpent")
                        .HasColumnType("text");

                    b.Property<string[]>("ServiceFeedback")
                        .HasColumnType("text[]");

                    b.Property<float?>("ServiceRating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("RequestService");
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<float?>("Accuracy")
                        .HasColumnType("real");

                    b.Property<long?>("ActualSerpentType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherSerpentType")
                        .HasColumnType("text");

                    b.Property<long?>("PredictedSerpentType")
                        .HasColumnType("bigint");

                    b.Property<bool?>("PredictionSuccess")
                        .HasColumnType("boolean");

                    b.Property<string[,]>("PredictionVerification")
                        .HasColumnType("text[]");

                    b.Property<string>("ScannedImageMedia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UploadedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ScannedImage");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Serpent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[,]>("SerpentMedia")
                        .HasColumnType("text[]");

                    b.Property<string[,]>("SerpentSafetyInstruction")
                        .HasColumnType("text[]");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.Property<string>("SubFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Venomous")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Serpent");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemAdmin");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("GeneratedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemReport");
                });

            modelBuilder.Entity("VenomVerseApi.Models.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CatcherPrevilege")
                        .HasColumnType("boolean");

                    b.Property<bool>("CommunityAdminPrevilege")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<bool>("ExpertPrevilege")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long[]>("PurchasedBook")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedArticle")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedBook")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedPost")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedResearch")
                        .HasColumnType("bigint[]");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ZoologistPrevilege")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Zoologist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("ApprovedDate")
                        .HasColumnType("date");

                    b.Property<long?>("ApprovedPersonId")
                        .HasColumnType("bigint");

                    b.Property<string[,]>("Certification")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Zoologist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
