// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VenomVerseApi.Models;

#nullable disable

namespace VenomVerseApi.Migrations
{
    [DbContext(typeof(VenomVerseContext))]
    [Migration("20230915094925_updateCatcherTable")]
    partial class updateCatcherTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("CommunityArticleUserDetail", b =>
                {
                    b.Property<long>("SavedArticle")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSavedArticleCommunityArticleId")
                        .HasColumnType("bigint");

                    b.HasKey("SavedArticle", "UserSavedArticleCommunityArticleId");

                    b.HasIndex("UserSavedArticleCommunityArticleId");

                    b.ToTable("CommunityArticleUserDetail");
                });

            modelBuilder.Entity("CommunityArticleUserDetail1", b =>
                {
                    b.Property<long>("React")
                        .HasColumnType("bigint");

                    b.Property<long>("UserReactUserDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("React", "UserReactUserDetailId");

                    b.HasIndex("UserReactUserDetailId");

                    b.ToTable("CommunityArticleUserDetail1");
                });

            modelBuilder.Entity("CommunityBookUserDetail", b =>
                {
                    b.Property<long>("CommunityBookPurchasedCommunityBookId")
                        .HasColumnType("bigint");

                    b.Property<long>("PurchasedBook")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityBookPurchasedCommunityBookId", "PurchasedBook");

                    b.HasIndex("PurchasedBook");

                    b.ToTable("CommunityBookUserDetail");
                });

            modelBuilder.Entity("CommunityBookUserDetail1", b =>
                {
                    b.Property<long>("CommunityBookSavedCommunityBookId")
                        .HasColumnType("bigint");

                    b.Property<long>("SavedBook")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityBookSavedCommunityBookId", "SavedBook");

                    b.HasIndex("SavedBook");

                    b.ToTable("CommunityBookUserDetail1");
                });

            modelBuilder.Entity("CommunityPostUserDetail", b =>
                {
                    b.Property<long>("SavedPost")
                        .HasColumnType("bigint");

                    b.Property<long>("UserSavedPostCommunityPostId")
                        .HasColumnType("bigint");

                    b.HasKey("SavedPost", "UserSavedPostCommunityPostId");

                    b.HasIndex("UserSavedPostCommunityPostId");

                    b.ToTable("CommunityPostUserDetail");
                });

            modelBuilder.Entity("CommunityPostUserDetail1", b =>
                {
                    b.Property<long>("React")
                        .HasColumnType("bigint");

                    b.Property<long>("UserPostReactUserDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("React", "UserPostReactUserDetailId");

                    b.HasIndex("UserPostReactUserDetailId");

                    b.ToTable("CommunityPostUserDetail1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VenomVerseApi.Models.Catcher", b =>
                {
                    b.Property<long>("ReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("ReqId"));

                    b.Property<DateOnly?>("ApprovedDateOne")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ApprovedDateThree")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ApprovedDateTwo")
                        .HasColumnType("date");

                    b.Property<bool>("ApprovedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("ApprovedPersonIdOne")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedPersonIdThree")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedPersonIdTwo")
                        .HasColumnType("bigint");

                    b.Property<bool>("ApprovedStatusOne")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApprovedStatusThree")
                        .HasColumnType("boolean");

                    b.Property<bool>("ApprovedStatusTwo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string[]>("CatcherEvidence")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<float?>("ChargingFee")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<long>("ReqCatcher")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.HasKey("ReqId");

                    b.HasIndex("ApprovedPersonIdOne");

                    b.HasIndex("ApprovedPersonIdThree");

                    b.HasIndex("ApprovedPersonIdTwo");

                    b.HasIndex("ReqCatcher")
                        .IsUnique();

                    b.ToTable("Catcher");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CatcherRating", b =>
                {
                    b.Property<long>("CatcherRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CatcherRatingId"));

                    b.Property<long>("CatcherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CatcherRatingId");

                    b.HasIndex("CatcherId");

                    b.HasIndex("UserId");

                    b.ToTable("CatcherRating");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityAdmin", b =>
                {
                    b.Property<long>("CommunityAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.HasKey("CommunityAdminId");

                    b.ToTable("CommunityAdmin");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityArticle", b =>
                {
                    b.Property<long>("CommunityArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityArticleId"));

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ArticleCopyright")
                        .HasColumnType("text[]");

                    b.Property<int>("ArticleStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<long[]>("React")
                        .HasColumnType("bigint[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityArticleId");

                    b.HasIndex("ApprovedUserId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CommunityArticle");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityArticleComment", b =>
                {
                    b.Property<long>("CommunityArticleCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityArticleCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CommunityArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityArticleCommentId");

                    b.HasIndex("CommunityArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityArticleComment");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityBook", b =>
                {
                    b.Property<long>("CommunityBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityBookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean");

                    b.Property<string[]>("BookCopyright")
                        .HasColumnType("text[]");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<DateOnly?>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("UploadedDate")
                        .HasColumnType("date");

                    b.Property<long>("UploadedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityBookId");

                    b.HasIndex("UploadedUserId");

                    b.ToTable("CommunityBook");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPost", b =>
                {
                    b.Property<long>("CommunityPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityPostId"));

                    b.Property<long?>("ApprovedAdmin")
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<int>("PostStatus")
                        .HasColumnType("integer");

                    b.Property<long[]>("React")
                        .HasColumnType("bigint[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityPostId");

                    b.HasIndex("ApprovedAdmin");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPost");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPostComment", b =>
                {
                    b.Property<long>("CommunityPostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityPostCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CommunityPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityPostCommentId");

                    b.HasIndex("CommunityPostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPostComment");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPostReport", b =>
                {
                    b.Property<long>("CommunityPostReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityPostReportId"));

                    b.Property<long?>("ComAdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommunityPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityPostReportId");

                    b.HasIndex("ComAdminId");

                    b.HasIndex("CommunityPostId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityPostReport");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityResearch", b =>
                {
                    b.Property<long>("CommunityResearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("CommunityResearchId"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string[]>("Media")
                        .HasColumnType("text[]");

                    b.Property<DateOnly?>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<string[]>("ResearchCopyright")
                        .HasColumnType("text[]");

                    b.Property<long?>("SavedResearch")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunityResearchId");

                    b.HasIndex("SavedResearch");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CommunityResearch");
                });

            modelBuilder.Entity("VenomVerseApi.Models.EmergencyContact", b =>
                {
                    b.Property<long>("EmergencyContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("EmergencyContactId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencySpecialNote")
                        .HasColumnType("text");

                    b.Property<string>("HospitalName")
                        .HasColumnType("text");

                    b.Property<string>("PersonName")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.HasKey("EmergencyContactId");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("NotificationId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("QuestionId"));

                    b.Property<string>("Answer01")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer02")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer03")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer04")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer05")
                        .HasColumnType("text");

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Correctness01")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness02")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness03")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness04")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Correctness05")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MultipleAnswers")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("NoteSinhala")
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string[]>("QuestionMedia")
                        .HasColumnType("text[]");

                    b.Property<string>("QuestionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionStringSinhala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("WriterId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId");

                    b.HasIndex("ApprovedUserId")
                        .IsUnique();

                    b.HasIndex("WriterId")
                        .IsUnique();

                    b.ToTable("Question");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Quiz", b =>
                {
                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmittedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("AttemptedMarks")
                        .HasColumnType("real");

                    b.Property<float?>("PassMark")
                        .HasColumnType("real");

                    b.Property<float?>("TotalMarks")
                        .HasColumnType("real");

                    b.HasKey("QuizId", "UserId", "SubmittedTime");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("VenomVerseApi.Models.QuizDetail", b =>
                {
                    b.Property<long>("QuizDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("QuizDetailId"));

                    b.Property<string>("QuizTopic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizTopicSinhala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuizDetailId");

                    b.ToTable("QuizDetail");
                });

            modelBuilder.Entity("VenomVerseApi.Models.QuizUserAnswer", b =>
                {
                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmittedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Correctness01")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness02")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness03")
                        .HasColumnType("boolean");

                    b.Property<bool>("Correctness04")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Correctness05")
                        .HasColumnType("boolean");

                    b.Property<bool>("Select01")
                        .HasColumnType("boolean");

                    b.Property<bool>("Select02")
                        .HasColumnType("boolean");

                    b.Property<bool>("Select03")
                        .HasColumnType("boolean");

                    b.Property<bool>("Select04")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Select05")
                        .HasColumnType("boolean");

                    b.HasKey("QuizId", "QuestionId", "UserId", "SubmittedTime");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId", "UserId", "SubmittedTime");

                    b.ToTable("QuizUserAnswer");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RegistrationRequest", b =>
                {
                    b.Property<long>("RegistrationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("RegistrationRequestId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegistrationRequestId");

                    b.ToTable("RegistrationRequest");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RequestService", b =>
                {
                    b.Property<long>("RequestServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("RequestServiceId"));

                    b.Property<bool>("AcceptFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("CatcherId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CompleteFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FakeReqFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<long>("ReqUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScannedImage")
                        .HasColumnType("bigint");

                    b.Property<long?>("SelectedSerpent")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceFeedback")
                        .HasColumnType("text");

                    b.Property<string[]>("ServiceFeedbackMedia")
                        .HasColumnType("text[]");

                    b.HasKey("RequestServiceId");

                    b.HasIndex("CatcherId")
                        .IsUnique();

                    b.HasIndex("ReqUserId")
                        .IsUnique();

                    b.HasIndex("ScannedImage")
                        .IsUnique();

                    b.HasIndex("SelectedSerpent")
                        .IsUnique();

                    b.ToTable("RequestService");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RequestToBeZoologistEvidence", b =>
                {
                    b.Property<long>("RequestToBeZoologistEvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("RequestToBeZoologistEvidenceId"));

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GraduatedYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ZoologistId")
                        .HasColumnType("bigint");

                    b.HasKey("RequestToBeZoologistEvidenceId");

                    b.HasIndex("ZoologistId");

                    b.ToTable("RequestToBeZoologistEvidence");
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImage", b =>
                {
                    b.Property<long>("ScannedImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("ScannedImageId"));

                    b.Property<float?>("Accuracy")
                        .HasColumnType("real");

                    b.Property<long?>("ActualSerpentType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PredictedSerpentType")
                        .HasColumnType("bigint");

                    b.Property<bool?>("PredictionSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ScannedImageMedia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UploadedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ScannedImageId");

                    b.HasIndex("ActualSerpentType")
                        .IsUnique();

                    b.HasIndex("PredictedSerpentType")
                        .IsUnique();

                    b.HasIndex("UploadedUserId")
                        .IsUnique();

                    b.ToTable("ScannedImage");
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImageReview", b =>
                {
                    b.Property<long>("ScannedImageReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("ScannedImageReviewId"));

                    b.Property<long?>("ActualSerpentType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PredictedSerpentType")
                        .HasColumnType("bigint");

                    b.Property<bool?>("PredictionSuccess")
                        .HasColumnType("boolean");

                    b.Property<long>("RequestServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScannedImageId")
                        .HasColumnType("bigint");

                    b.HasKey("ScannedImageReviewId");

                    b.HasIndex("ActualSerpentType")
                        .IsUnique();

                    b.HasIndex("PredictedSerpentType")
                        .IsUnique();

                    b.HasIndex("RequestServiceId");

                    b.HasIndex("ReviewedUserId");

                    b.HasIndex("ScannedImageId")
                        .IsUnique();

                    b.ToTable("ScannedImageReview");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Serpent", b =>
                {
                    b.Property<long>("SerpentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("SerpentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionSinhala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("SerpentMedia")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SinhalaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.Property<string>("SpecialNoteSinhala")
                        .HasColumnType("text");

                    b.Property<string>("SubFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Venomous")
                        .HasColumnType("integer");

                    b.HasKey("SerpentId");

                    b.ToTable("Serpent");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SerpentInstruction", b =>
                {
                    b.Property<long>("SerpentInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("SerpentInstructionId"));

                    b.Property<string>("InsDetail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsDetailSinhala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SerpentId")
                        .HasColumnType("bigint");

                    b.Property<long>("WittenUser")
                        .HasColumnType("bigint");

                    b.HasKey("SerpentInstructionId");

                    b.HasIndex("SerpentId")
                        .IsUnique();

                    b.HasIndex("WittenUser");

                    b.ToTable("SerpentInstruction");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SerpentMedia", b =>
                {
                    b.Property<long>("SerpentMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("SerpentMediaId"));

                    b.Property<long>("SerpentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerpentMediaAltText")
                        .HasColumnType("text");

                    b.Property<string>("SerpentMediaDescription")
                        .HasColumnType("text");

                    b.Property<string>("SerpentMediaSource")
                        .HasColumnType("text");

                    b.HasKey("SerpentMediaId");

                    b.HasIndex("SerpentId");

                    b.ToTable("SerpentMedia");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemAdmin", b =>
                {
                    b.Property<long>("SystemAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("SystemAdminId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("JoinedDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SystemAdminId");

                    b.ToTable("SystemAdmin");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemReport", b =>
                {
                    b.Property<long>("SystemReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("SystemReportId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("GeneratedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SystemReportId");

                    b.HasIndex("GeneratedUserId")
                        .IsUnique();

                    b.ToTable("SystemReport");
                });

            modelBuilder.Entity("VenomVerseApi.Models.UserDetail", b =>
                {
                    b.Property<long>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("UserDetailId"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CatcherPrivilege")
                        .HasColumnType("boolean");

                    b.Property<bool>("CommunityAdminPrivilege")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("CurrentMarks")
                        .HasColumnType("real");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<bool>("ExpertPrivilege")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long[]>("PurchasedBook")
                        .HasColumnType("bigint[]");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long[]>("SavedArticle")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedBook")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedPost")
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("SavedResearch")
                        .HasColumnType("bigint[]");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkingStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ZoologistPrivilege")
                        .HasColumnType("boolean");

                    b.HasKey("UserDetailId");

                    b.HasIndex("QuestionId");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Zoologist", b =>
                {
                    b.Property<long>("ZoologistId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("ApprovedDate")
                        .HasColumnType("date");

                    b.Property<long?>("ApprovedPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("text");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.HasKey("ZoologistId");

                    b.HasIndex("ApprovedPersonId");

                    b.ToTable("Zoologist");
                });

            modelBuilder.Entity("CommunityArticleUserDetail", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("SavedArticle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.CommunityArticle", null)
                        .WithMany()
                        .HasForeignKey("UserSavedArticleCommunityArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityArticleUserDetail1", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityArticle", null)
                        .WithMany()
                        .HasForeignKey("React")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserReactUserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityBookUserDetail", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityBook", null)
                        .WithMany()
                        .HasForeignKey("CommunityBookPurchasedCommunityBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("PurchasedBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityBookUserDetail1", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityBook", null)
                        .WithMany()
                        .HasForeignKey("CommunityBookSavedCommunityBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("SavedBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPostUserDetail", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("SavedPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.CommunityPost", null)
                        .WithMany()
                        .HasForeignKey("UserSavedPostCommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPostUserDetail1", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityPost", null)
                        .WithMany()
                        .HasForeignKey("React")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany()
                        .HasForeignKey("UserPostReactUserDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.Catcher", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Catcher", "ApprovalOne")
                        .WithMany()
                        .HasForeignKey("ApprovedPersonIdOne");

                    b.HasOne("VenomVerseApi.Models.Catcher", "ApprovalThree")
                        .WithMany()
                        .HasForeignKey("ApprovedPersonIdThree");

                    b.HasOne("VenomVerseApi.Models.Catcher", "ApprovalTwo")
                        .WithMany()
                        .HasForeignKey("ApprovedPersonIdTwo");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("Catcher")
                        .HasForeignKey("VenomVerseApi.Models.Catcher", "ReqCatcher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalOne");

                    b.Navigation("ApprovalThree");

                    b.Navigation("ApprovalTwo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CatcherRating", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Catcher", "Catcher")
                        .WithMany()
                        .HasForeignKey("CatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catcher");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityAdmin", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("CommunityAdmin")
                        .HasForeignKey("VenomVerseApi.Models.CommunityAdmin", "CommunityAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityArticle", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityAdmin", "CommunityAdmin")
                        .WithOne("CommunityArticle")
                        .HasForeignKey("VenomVerseApi.Models.CommunityArticle", "ApprovedUserId");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("UserArticle")
                        .HasForeignKey("VenomVerseApi.Models.CommunityArticle", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityArticleComment", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityArticle", "CommunityArticle")
                        .WithMany()
                        .HasForeignKey("CommunityArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityArticle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityBook", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Zoologist", "Zoologist")
                        .WithMany()
                        .HasForeignKey("UploadedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zoologist");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPost", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityAdmin", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedAdmin");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "PostUser")
                        .WithOne("UserPost")
                        .HasForeignKey("VenomVerseApi.Models.CommunityPost", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("PostUser");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPostComment", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityPost", "CommunityArticle")
                        .WithMany()
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityArticle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityPostReport", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityAdmin", "MaintainedBy")
                        .WithMany()
                        .HasForeignKey("ComAdminId");

                    b.HasOne("VenomVerseApi.Models.CommunityPost", "CommunityPost")
                        .WithMany()
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityPost");

                    b.Navigation("MaintainedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityResearch", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", null)
                        .WithMany("CommunityResearch")
                        .HasForeignKey("SavedResearch");

                    b.HasOne("VenomVerseApi.Models.Zoologist", "Zoologist")
                        .WithOne("CommunityResearch")
                        .HasForeignKey("VenomVerseApi.Models.CommunityResearch", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zoologist");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Notification", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("Notification")
                        .HasForeignKey("VenomVerseApi.Models.Notification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Question", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Zoologist", "ZoologistApprove")
                        .WithOne("QuestionApprove")
                        .HasForeignKey("VenomVerseApi.Models.Question", "ApprovedUserId");

                    b.HasOne("VenomVerseApi.Models.Zoologist", "ZoologistWrite")
                        .WithOne("QuestionWrite")
                        .HasForeignKey("VenomVerseApi.Models.Question", "WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZoologistApprove");

                    b.Navigation("ZoologistWrite");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Quiz", b =>
                {
                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("Quiz")
                        .HasForeignKey("VenomVerseApi.Models.Quiz", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.QuizUserAnswer", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId", "UserId", "SubmittedTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RequestService", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Catcher", "Catcher")
                        .WithOne("RequestService")
                        .HasForeignKey("VenomVerseApi.Models.RequestService", "CatcherId");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("RequestService")
                        .HasForeignKey("VenomVerseApi.Models.RequestService", "ReqUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.ScannedImage", "ScannedImg")
                        .WithOne("RequestService")
                        .HasForeignKey("VenomVerseApi.Models.RequestService", "ScannedImage");

                    b.HasOne("VenomVerseApi.Models.Serpent", "Serpent")
                        .WithOne("RequestService")
                        .HasForeignKey("VenomVerseApi.Models.RequestService", "SelectedSerpent");

                    b.Navigation("Catcher");

                    b.Navigation("ScannedImg");

                    b.Navigation("Serpent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.RequestToBeZoologistEvidence", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Zoologist", "Zoologist")
                        .WithMany()
                        .HasForeignKey("ZoologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zoologist");
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImage", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Serpent", "ActualSerpent")
                        .WithOne("ScannedImageAct")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImage", "ActualSerpentType");

                    b.HasOne("VenomVerseApi.Models.Serpent", "PredictedSerpent")
                        .WithOne("ScannedImagePred")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImage", "PredictedSerpentType");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("ScannedImage")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImage", "UploadedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualSerpent");

                    b.Navigation("PredictedSerpent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImageReview", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Serpent", "SerpentActual")
                        .WithOne("SerpentActual")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImageReview", "ActualSerpentType");

                    b.HasOne("VenomVerseApi.Models.Serpent", "SerpentPredict")
                        .WithOne("SerpentPredict")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImageReview", "PredictedSerpentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.RequestService", "RequestService")
                        .WithMany()
                        .HasForeignKey("RequestServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("ReviewedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.ScannedImage", "ScannedImage")
                        .WithOne("ScannedImageReview")
                        .HasForeignKey("VenomVerseApi.Models.ScannedImageReview", "ScannedImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestService");

                    b.Navigation("ScannedImage");

                    b.Navigation("SerpentActual");

                    b.Navigation("SerpentPredict");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SerpentInstruction", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Serpent", "Serpent")
                        .WithOne("SerpentInstruction")
                        .HasForeignKey("VenomVerseApi.Models.SerpentInstruction", "SerpentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VenomVerseApi.Models.Zoologist", "WrittenUser")
                        .WithMany()
                        .HasForeignKey("WittenUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serpent");

                    b.Navigation("WrittenUser");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SerpentMedia", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Serpent", "Serpent")
                        .WithMany()
                        .HasForeignKey("SerpentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serpent");
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemReport", b =>
                {
                    b.HasOne("VenomVerseApi.Models.SystemAdmin", "SystemAdmin")
                        .WithOne("SystemReport")
                        .HasForeignKey("VenomVerseApi.Models.SystemReport", "GeneratedUserId");

                    b.Navigation("SystemAdmin");
                });

            modelBuilder.Entity("VenomVerseApi.Models.UserDetail", b =>
                {
                    b.HasOne("VenomVerseApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Zoologist", b =>
                {
                    b.HasOne("VenomVerseApi.Models.CommunityAdmin", "CommunityAdmin")
                        .WithMany()
                        .HasForeignKey("ApprovedPersonId");

                    b.HasOne("VenomVerseApi.Models.UserDetail", "User")
                        .WithOne("Zoologist")
                        .HasForeignKey("VenomVerseApi.Models.Zoologist", "ZoologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Catcher", b =>
                {
                    b.Navigation("RequestService")
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.CommunityAdmin", b =>
                {
                    b.Navigation("CommunityArticle")
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.ScannedImage", b =>
                {
                    b.Navigation("RequestService")
                        .IsRequired();

                    b.Navigation("ScannedImageReview")
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.Serpent", b =>
                {
                    b.Navigation("RequestService")
                        .IsRequired();

                    b.Navigation("ScannedImageAct")
                        .IsRequired();

                    b.Navigation("ScannedImagePred")
                        .IsRequired();

                    b.Navigation("SerpentActual")
                        .IsRequired();

                    b.Navigation("SerpentInstruction")
                        .IsRequired();

                    b.Navigation("SerpentPredict")
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.SystemAdmin", b =>
                {
                    b.Navigation("SystemReport")
                        .IsRequired();
                });

            modelBuilder.Entity("VenomVerseApi.Models.UserDetail", b =>
                {
                    b.Navigation("Catcher");

                    b.Navigation("CommunityAdmin")
                        .IsRequired();

                    b.Navigation("CommunityResearch");

                    b.Navigation("Notification");

                    b.Navigation("Quiz");

                    b.Navigation("RequestService");

                    b.Navigation("ScannedImage");

                    b.Navigation("UserArticle")
                        .IsRequired();

                    b.Navigation("UserPost")
                        .IsRequired();

                    b.Navigation("Zoologist");
                });

            modelBuilder.Entity("VenomVerseApi.Models.Zoologist", b =>
                {
                    b.Navigation("CommunityResearch")
                        .IsRequired();

                    b.Navigation("QuestionApprove")
                        .IsRequired();

                    b.Navigation("QuestionWrite")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
